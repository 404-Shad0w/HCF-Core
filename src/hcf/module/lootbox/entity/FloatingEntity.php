<?php
namespace hcf\module\lootbox\entity;

use pocketmine\block\VanillaBlocks;
use pocketmine\entity\Living;
use pocketmine\entity\Location;
use pocketmine\event\entity\EntityDamageEvent;
use pocketmine\nbt\tag\CompoundTag;
use pocketmine\network\mcpe\convert\RuntimeBlockMapping;
use pocketmine\network\mcpe\convert\TypeConverter;
use pocketmine\network\mcpe\protocol\types\entity\EntityMetadataCollection;
use pocketmine\network\mcpe\protocol\types\entity\EntityMetadataFlags;
use pocketmine\network\mcpe\protocol\types\entity\EntityMetadataProperties;

class FloatingEntity extends Living{

	public string $nameTag = "";

	public float  $scale = 0.0001;

	public function __construct(Location $location, ?CompoundTag $nbt = null)
	{
		$this->setNameTagVisible(true);
		$this->setNameTagAlwaysVisible(true);
		parent::__construct($location, $nbt);
	}
	protected function syncNetworkData(EntityMetadataCollection $properties) : void{
		parent::syncNetworkData($properties);
		$properties->setByte(EntityMetadataProperties::ALWAYS_SHOW_NAMETAG, $this->alwaysShowNameTag ? 1 : 0);
		#$properties->setFloat(EntityMetadataProperties::SCALE, $this->scale);
		$properties->setString(EntityMetadataProperties::NAMETAG, $this->nameTag);
		$properties->setInt(EntityMetadataProperties::VARIANT, TypeConverter::getInstance()->getBlockTranslator()->internalIdToNetworkId(VanillaBlocks::AIR()->getStateId()));
	}

	public function attack(EntityDamageEvent $source): void
	{
		$source->cancel();
	}

	protected function getInitialSizeInfo(): \pocketmine\entity\EntitySizeInfo
	{
		return new \pocketmine\entity\EntitySizeInfo(0,0,0);
	}

	public function getId(): int
	{
		return parent::getId(); // TODO: Change the autogenerated stub
	}


	public static function getNetworkTypeId(): string
	{
		return \pocketmine\network\mcpe\protocol\types\entity\EntityIds::CHICKEN;
	}

	public function getName(): string
	{
		return "Hm";
	}
}